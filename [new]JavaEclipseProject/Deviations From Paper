Our implementation of the or-tree search differs from the search model and data structures specified in 
our paper in the following ways. 

In our paper we defined a state as a set of zero or more person-room tuples. In the the Java implementation, 
states are represented by ONode objects which contain a lot more information than this including an ArrayList of
assigned people, an ArrayList of unassigned people, and an ArrayList of available rooms (rooms which are not full). 
ONode also keeps track of the person and room that is changing when this node is created (as opposed to all
the rooms and people who were assigned higher up in the tree). We also added instance variables for the 
f_leaf value of this node (state) and a boolean indicating whether or not this node has been explored at this
point in the search process. We found that this additional information was necessary both to calculate f_leaf
values (on which tree expansion decisions are based) and to control the tree traversal during the search. 

The search process in the Java implementation is more complicated than the one specified in our paper. For one
thing, we are now backtracking to find multiple solutions in a sophisticated way. Instead of blindly backtracking, we 
calculate the f_leaf values of solutions close to the original solution. If there are no significant improvements in 
the values, we go back to the root and begin the search again through a different node. If the results around the 
original solution are promising, instead we continue searching in that general area. 

Finally, we ranked the unassigned people based on their attributes and how these attributes affect the overall penalty (for
example, group heads have a high penalty possibility, so they are ranked the highest in terms of urgency and are therefore assigned
before everyone else. The ranking system is group heads -> project heads -> managers -> secretaries -> smokers -> hackers ->
researches -> other people.

